*******************//To use lambda functions in Some places
public interface NoArgCallback {
    void invoke();

    // No operation
    static final NoArgCallback NO_OP = () -> {
    };
}


 ***************// To return expected message while calling API

sealed interface Expected<T> {
    class Success<T>(val value: T) : Expected<T>
    class Error<T>(val message: String, val code: Int = -1) : Expected<T> {
        fun <Y> asError() = Error<Y>(message)
    }

    val success get() = (this as? Success)?.value
    val error get() = (this as? Error)?.message

    fun onSuccess(consumer: UnaryConsumer<T>): Expected<T> {
        if (this is Success) consumer(value)
        return this
    }

    fun onError(consumer: UnaryConsumer<Error<T>>): Expected<T> {
        if (this is Error) consumer(this)
        return this
    }
}



*********************//When I want to return Expected  in my code

suspend fun <TResult, TResponse : BaseResponse<TResult>> Call<TResponse>.awaitResult(
    context: Activity?,
    showProgressBar: Boolean,
): Expected<TResult> {
    return suspendCancellableCoroutine { continuation ->
        enqueue(object : CustomCallBack<TResponse>(context, showProgressBar, false) {
            override fun onResponse(call: Call<TResponse>, response: Response<TResponse>) {
                super.onResponse(call, response)
                //  CostumCallBack cant extract code in response correctly so it sends code manually
                var code = 0

                val body = if (response.isSuccessful) response.body() else null
                val res = body?.result

                if (res != null && (body.code / 100 == 2 || body.code == 0)) {
                    //Log.i("bodyDetails", "onResponse: \n" + response.raw().request.url + "\n" + body.javaClass.toString())
                    code = body.code
                    continuation.resume(Expected.Success(res))
                } else {
                    val error =
                        try {
                            val failureResponse = Gson()
                                .fromJson(response.errorBody()?.string(), ErrorBody::class.java)
                           // Log.i("bodyDetails", "onResponse: \n" + response.raw().request.url + "\n" + failureResponse.javaClass.toString())
                            code = failureResponse.code
                            Expected.Error<TResult>(
                                failureResponse.message,
                                failureResponse.code
                            )
                        } catch (ignored: Exception) {
                            Expected.Error(
                                (body?.message ?: response.message() ?: ""),
                                (body?.code ?: -1)
                            )
                        }
                    continuation.resume(error)

                    //CostumCallBack manual token expire check
                    checkTokenExpire(code, context)
                }
            }

            override fun onFailure(call: Call<TResponse>, t: Throwable) {
                super.onFailure(call, t)
                continuation.resume(
                    Expected.Error(
                        message = t.message ?: "Something went wrong",
                        code = Constants.NETWORK_FAIL,
                    )
                )
            }
        })
    }
}

suspend fun <TResult, TResponse : BaseResponse<TResult>> Call<TResponse>.awaitResult() =
    awaitResult(null, false)

suspend fun <TResult, TResponse : BaseResponse<TResult>> Call<TResponse>.awaitResult(
    context: Activity?,
) = awaitResult(context, context != null)

fun <TResult, TResponse : BaseResponse<TResult>> Call<TResponse>.awaitResultAsync(
    context: Activity?,
    showProgressBar: Boolean,
    onComplete: UnaryConsumer<Expected<TResult>>,
) {
    CoroutineScope(Dispatchers.Main).launch {
        val result = awaitResult(context, showProgressBar)
        onComplete.invoke(result)
    }
}

//Base Response Adapter
open class BaseResponseAdapter<ValueType>(
    @SerializedName("result")
    val value: ValueType?,
) : BaseResponse<ValueType>(), Serializable {
    override fun getResult() = value
}


/Base Response 
abstract public class BaseResponse<T> implements Serializable {
    @SerializedName("code")
    @Expose
    private int code;
    @SerializedName("message")
    @Expose
    private String message;
    @SerializedName("status")
    @Expose
    private int status;

    private final static long serialVersionUID = -3623480830500576344L;


    public BaseResponse() {
    }

    public BaseResponse(Integer code, String message) {
        super();
        this.code = code;
        this.message = message;
    }

    public Integer getCode() {
        return code;
    }

    public void setCode(Integer code) {
        this.code = code;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    @Nullable
    abstract public T getResult();
}


// Show warning dialog
public static void showWarningDialog(
        final Activity context,
        @Nullable final String title,
        @Nullable final String message,
        @Nullable final DualConsumer<TextView, Dialog> dynamicMessage,
        @NonNull final int drawableRes,
        @NonNull final boolean isCancelable,
        final @Nullable @StringRes Integer positiveButton,
        final @Nullable @StringRes Integer negativeButton,
        @Nullable final NoArgCallback positiveListener,
        @Nullable final NoArgCallback negativeListener,
        @Nullable final NoArgCallback dismissListener) {
    new Handler(Looper.getMainLooper()).post(() -> {
        InfoDialog dialog = new InfoDialog(context, title, message, dynamicMessage, drawableRes, positiveButton, negativeButton, positiveListener, negativeListener, dismissListener);
        dialog.setCancelable(isCancelable);
        dialog.show();
    });
}


// Info dialog
class InfoDialog(
    context: Context,
    private val title: String?,
    private val message: String?,
    private val dynamicMessage: DualConsumer<TextView, Dialog>?,
    private val drawableRes: Int? = null,
    @StringRes private val positiveButtonText: Int?,
    @StringRes private val negativeButtonText: Int?,
    private val onPositiveButtonClickListener: NoArgCallback? = null,
    private val onNegativeButtonClickListener: NoArgCallback? = null,
    private val onDismissListener: NoArgCallback? = null
) : Dialog(context) {
    private val binding by lazy { InfoDialogBinding.inflate(layoutInflater) }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        requestWindowFeature(Window.FEATURE_NO_TITLE)

        setContentView(binding.root)

        window?.let {
            it.setLayout(
                WindowManager.LayoutParams.MATCH_PARENT,
                WindowManager.LayoutParams.WRAP_CONTENT
            )
            it.setBackgroundDrawable(InsetDrawable(ColorDrawable(Color.TRANSPARENT), 50))
        }

        title?.let { binding.title.text = it }
        message?.let { binding.message.text = it }
        dynamicMessage.let { it?.invoke(binding.message,this) }
        if (drawableRes != null) binding.icon.setImageResource(drawableRes)
        positiveButtonText?.let { binding.positiveButton.text = context.getString(it) }
        negativeButtonText?.let {
            binding.negativeButton.isVisible = true
            binding.negativeButton.text = context.getString(it)
        }
        binding.positiveButton.setOnClickListener {
            onPositiveButtonClickListener?.invoke()
            dismiss()
        }
        binding.negativeButton.setOnClickListener {
            onNegativeButtonClickListener?.invoke()
            dismiss()
        }
        setOnCancelListener{
            onDismissListener?.invoke()
        }

    }
}


*******//For using Expected class
changeSmsNotificationStatus(
                    this@SMSNotificationActivity,
                    SmsNotificationRequest(args.card.cardid.toInt(), status.toString())
                ) { expected ->
                    expected.onSuccess {
                        /*App.cards.find { it.cardid == args.card.cardid }?.processingInfo?.smsNotificationStatus =
                            it.smsNotificationStatus*/
                        changeLayoutForToggle(it.smsNotificationStatus == SmsNotificationStatus.ACTIVE)
                    }
                    expected.onError {
                        changeLayoutForToggle(isToggleActive)
                        Toast.makeText(this, it.message, Toast.LENGTH_SHORT).show()
                    }
                }


****// A function that gets Expected inside UnaryConsumer
fun changeSmsNotificationStatus(
    activity: Activity,
    request: SmsNotificationRequest,
    onComplete: UnaryConsumer<Expected<SmsNotification>>
) {
    CoroutineScope(Dispatchers.Main).launch {
        onComplete(changeSmsNotificationStatusAsync(activity, request))
    }
}

****// A function that returns Expected using awaitResult
suspend fun changeSmsNotificationStatusAsync(
    activity: Activity?,
    request: SmsNotificationRequest
): Expected<SmsNotification> =
    smsNotificationStatusCall(request).awaitResult(activity, activity != null)



***//Unary Consumer to call functions with lambda
public interface UnaryConsumer<T> extends Serializable {
    void invoke(T t);
}
